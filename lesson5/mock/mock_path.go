// Code generated by MockGen. DO NOT EDIT.
// Source: ./lesson5/distance/path/path.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPath is a mock of Path interface.
type MockPath struct {
	ctrl     *gomock.Controller
	recorder *MockPathMockRecorder
}

// MockPathMockRecorder is the mock recorder for MockPath.
type MockPathMockRecorder struct {
	mock *MockPath
}

// NewMockPath creates a new mock instance.
func NewMockPath(ctrl *gomock.Controller) *MockPath {
	mock := &MockPath{ctrl: ctrl}
	mock.recorder = &MockPathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPath) EXPECT() *MockPathMockRecorder {
	return m.recorder
}

// CountPoints mock base method.
func (m *MockPath) CountPoints() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPoints")
	ret0, _ := ret[0].(int)
	return ret0
}

// CountPoints indicates an expected call of CountPoints.
func (mr *MockPathMockRecorder) CountPoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPoints", reflect.TypeOf((*MockPath)(nil).CountPoints))
}

// Distance mock base method.
func (m *MockPath) Distance() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Distance")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Distance indicates an expected call of Distance.
func (mr *MockPathMockRecorder) Distance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distance", reflect.TypeOf((*MockPath)(nil).Distance))
}

// DistanceBetween mock base method.
func (m *MockPath) DistanceBetween(arg0, arg1 int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistanceBetween", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistanceBetween indicates an expected call of DistanceBetween.
func (mr *MockPathMockRecorder) DistanceBetween(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistanceBetween", reflect.TypeOf((*MockPath)(nil).DistanceBetween), arg0, arg1)
}

// PointAt mock base method.
func (m *MockPath) PointAt(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PointAt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PointAt indicates an expected call of PointAt.
func (mr *MockPathMockRecorder) PointAt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PointAt", reflect.TypeOf((*MockPath)(nil).PointAt), arg0)
}
