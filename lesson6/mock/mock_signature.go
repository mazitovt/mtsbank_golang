// Code generated by MockGen. DO NOT EDIT.
// Source: ./signature/contract/signature.go

// Package mock is a generated GoMock package.
package mock

import (
	fs "io/fs"
	contract "mtsbank_golang/lesson6/signature/contract"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSignature is a mock of Signature interface.
type MockSignature struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureMockRecorder
}

// MockSignatureMockRecorder is the mock recorder for MockSignature.
type MockSignatureMockRecorder struct {
	mock *MockSignature
}

// NewMockSignature creates a new mock instance.
func NewMockSignature(ctrl *gomock.Controller) *MockSignature {
	mock := &MockSignature{ctrl: ctrl}
	mock.recorder = &MockSignatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignature) EXPECT() *MockSignatureMockRecorder {
	return m.recorder
}

// Date mocks base method.
func (m *MockSignature) Date() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Date")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Date indicates an expected call of Date.
func (mr *MockSignatureMockRecorder) Date() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Date", reflect.TypeOf((*MockSignature)(nil).Date))
}

// Equal mocks base method.
func (m *MockSignature) Equal(s contract.Signature) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", s)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockSignatureMockRecorder) Equal(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockSignature)(nil).Equal), s)
}

// Hash mocks base method.
func (m *MockSignature) Hash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockSignatureMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockSignature)(nil).Hash))
}

// HashFile mocks base method.
func (m *MockSignature) HashFile(arg0 string, arg1 fs.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HashFile indicates an expected call of HashFile.
func (mr *MockSignatureMockRecorder) HashFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashFile", reflect.TypeOf((*MockSignature)(nil).HashFile), arg0, arg1)
}

// Name mocks base method.
func (m *MockSignature) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSignatureMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSignature)(nil).Name))
}

// ParseString mocks base method.
func (m *MockSignature) ParseString(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseString", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseString indicates an expected call of ParseString.
func (mr *MockSignatureMockRecorder) ParseString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseString", reflect.TypeOf((*MockSignature)(nil).ParseString), arg0)
}

// SignatureByte mocks base method.
func (m *MockSignature) SignatureByte() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignatureByte")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// SignatureByte indicates an expected call of SignatureByte.
func (mr *MockSignatureMockRecorder) SignatureByte() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignatureByte", reflect.TypeOf((*MockSignature)(nil).SignatureByte))
}

// Size mocks base method.
func (m *MockSignature) Size() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(string)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockSignatureMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockSignature)(nil).Size))
}
